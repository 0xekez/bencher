Benchmarking code for multicloud measurements.

`config.toml` contains configuration information that the benchmarking
code reads in and uses. Requests are made at a rate of 24 per day. By
default they will download a 10mb file from the target ip address via
the public and private ip address and log information about it to the
log files.

All log entries are in the form `<ms since epoch>, <data>` and
enteries are seperated by newline characters. For error logs, `<data>`
is a message about the type of error that occured. For timing logs
`<data>` is the number of ms that the file request took.

There are two branches in this repo called `vpcone` and `vpctwo` that
the ec2 instances in our VPCs use to store their unique `config.toml`
files. Otherwise they are the same as `main`. See the `config.toml`
files there for an example setup.

Each ec2 instance runs a public webserver that you can access by
visiting `<instance ip>:8000`. There is a barebones html file there
that has links to the log files for monitoring.

## Building

You'll need a c compiler and openssl-devel. If you don't have those
you'll get errors during the build about a missing libc library and
openssl install.

To build:

```
cargo build --release
```

To run and start sending / receiving requests:

```
cargo run --release
```

Note that it is important to build and run in release mode as the http
server library we're using will not accept external connections in
debug mode.

## Running

The password for the ec2-user accounts on our AWS vpcs is
`multicloud`. The best way to run this is to to run it inside of a
systemctl service on linux. There is an example service file in
`service/bencher.service`.

To set that up, first verify that the paths in the service file match
the ones on your local machine. Assuming they do, create a new file
called `/etc/systemd/system/bencher.service` and paste the contents of
`service/bencher.service` into there. Finally, run the following
commands to start the service:

```
systemctl daemon-reload
systemctl start bencher.service
```

To check on the status of the running service:

```
systemctl status bencher.service
```